// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai;

import com.azure.ai.openai.implementation.AzureOpenAIClientImpl;
import com.azure.ai.openai.models.CreateSpeechRequest;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AzureOpenAIClient type.
 */
@ServiceClient(builder = AzureOpenAIClientBuilder.class, isAsync = true)
public final class AzureOpenAIAsyncClient {
    @Generated
    private final AzureOpenAIClientImpl serviceClient;

    /**
     * Initializes an instance of AzureOpenAIAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureOpenAIAsyncClient(AzureOpenAIClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Generates audio from the input text.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(tts-1/tts-1-hd) (Required)
     *     input: String (Required)
     *     voice: String(alloy/echo/fable/onyx/nova/shimmer) (Required)
     *     response_format: String(mp3/opus/aac/flac/wav/pcm) (Optional)
     *     speed: Double (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createSpeechWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        return this.serviceClient.createSpeechWithResponseAsync(requestBody, requestOptions);
    }

    /**
     * Generates audio from the input text.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> createSpeech(CreateSpeechRequest requestBody) {
        // Generated convenience method for createSpeechWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createSpeechWithResponse(BinaryData.fromObject(requestBody), requestOptions).flatMap(FluxUtil::toMono);
    }
}

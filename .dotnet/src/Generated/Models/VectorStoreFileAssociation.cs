// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.VectorStores
{
    public partial class VectorStoreFileAssociation
    {
        internal IDictionary<string, BinaryData> _serializedAdditionalRawData;

        internal VectorStoreFileAssociation(string fileId, int size, DateTimeOffset createdAt, string vectorStoreId, VectorStoreFileAssociationStatus status, VectorStoreFileAssociationError? lastError)
        {
            Argument.AssertNotNull(fileId, nameof(fileId));
            Argument.AssertNotNull(vectorStoreId, nameof(vectorStoreId));

            FileId = fileId;
            Size = size;
            CreatedAt = createdAt;
            VectorStoreId = vectorStoreId;
            Status = status;
            LastError = lastError;
        }

        /// <summary> Initializes a new instance of <see cref="VectorStoreFileAssociation"/>. </summary>
        /// <param name="fileId"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file`. </param>
        /// <param name="size"> The total vector store usage in bytes. Note that this may be different from the original file size. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store file was created. </param>
        /// <param name="vectorStoreId"> The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to. </param>
        /// <param name="status"> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </param>
        /// <param name="lastError"> The last error associated with this vector store file. Will be `null` if there are no errors. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VectorStoreFileAssociation(string fileId, InternalVectorStoreFileObjectObject @object, int size, DateTimeOffset createdAt, string vectorStoreId, VectorStoreFileAssociationStatus status, VectorStoreFileAssociationError? lastError, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileId = fileId;
            Object = @object;
            Size = size;
            CreatedAt = createdAt;
            VectorStoreId = vectorStoreId;
            Status = status;
            LastError = lastError;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        internal VectorStoreFileAssociation()
        {
        }
        public DateTimeOffset CreatedAt { get; }
        public string VectorStoreId { get; }
        public VectorStoreFileAssociationStatus Status { get; }
        public VectorStoreFileAssociationError? LastError { get; }
    }
}

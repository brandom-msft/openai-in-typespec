// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Assistants
{
    internal readonly partial struct InternalMessageContentItemFileObjectImageFileDetail : IEquatable<InternalMessageContentItemFileObjectImageFileDetail>
    {
        private readonly string _value;

        public InternalMessageContentItemFileObjectImageFileDetail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutoValue = "auto";
        private const string LowValue = "low";
        private const string HighValue = "high";

        public static InternalMessageContentItemFileObjectImageFileDetail Auto { get; } = new InternalMessageContentItemFileObjectImageFileDetail(AutoValue);
        public static InternalMessageContentItemFileObjectImageFileDetail Low { get; } = new InternalMessageContentItemFileObjectImageFileDetail(LowValue);
        public static InternalMessageContentItemFileObjectImageFileDetail High { get; } = new InternalMessageContentItemFileObjectImageFileDetail(HighValue);
        public static bool operator ==(InternalMessageContentItemFileObjectImageFileDetail left, InternalMessageContentItemFileObjectImageFileDetail right) => left.Equals(right);
        public static bool operator !=(InternalMessageContentItemFileObjectImageFileDetail left, InternalMessageContentItemFileObjectImageFileDetail right) => !left.Equals(right);
        public static implicit operator InternalMessageContentItemFileObjectImageFileDetail(string value) => new InternalMessageContentItemFileObjectImageFileDetail(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalMessageContentItemFileObjectImageFileDetail other && Equals(other);
        public bool Equals(InternalMessageContentItemFileObjectImageFileDetail other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        public override string ToString() => _value;
    }
}

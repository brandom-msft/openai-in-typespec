// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Assistants
{
    public partial class AssistantThread
    {
        internal IDictionary<string, BinaryData> _serializedAdditionalRawData;

        internal AssistantThread(string id, DateTimeOffset createdAt, ToolResources toolResources, IReadOnlyDictionary<string, string> metadata)
        {
            Argument.AssertNotNull(id, nameof(id));

            Id = id;
            CreatedAt = createdAt;
            ToolResources = toolResources;
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of <see cref="AssistantThread"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the thread was created. </param>
        /// <param name="toolResources"> A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs. </param>
        /// <param name="metadata"> Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssistantThread(string id, InternalThreadObjectObject @object, DateTimeOffset createdAt, ToolResources toolResources, IReadOnlyDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Object = @object;
            CreatedAt = createdAt;
            ToolResources = toolResources;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        internal AssistantThread()
        {
        }

        public string Id { get; }

        public DateTimeOffset CreatedAt { get; }
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}

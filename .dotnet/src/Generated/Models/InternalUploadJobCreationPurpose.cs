// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Files
{
    internal readonly partial struct InternalUploadJobCreationPurpose : IEquatable<InternalUploadJobCreationPurpose>
    {
        private readonly string _value;

        public InternalUploadJobCreationPurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AssistantsValue = "assistants";
        private const string BatchValue = "batch";
        private const string FineTuneValue = "fine-tune";
        private const string VisionValue = "vision";

        public static InternalUploadJobCreationPurpose Assistants { get; } = new InternalUploadJobCreationPurpose(AssistantsValue);
        public static InternalUploadJobCreationPurpose Batch { get; } = new InternalUploadJobCreationPurpose(BatchValue);
        public static InternalUploadJobCreationPurpose FineTune { get; } = new InternalUploadJobCreationPurpose(FineTuneValue);
        public static InternalUploadJobCreationPurpose Vision { get; } = new InternalUploadJobCreationPurpose(VisionValue);
        public static bool operator ==(InternalUploadJobCreationPurpose left, InternalUploadJobCreationPurpose right) => left.Equals(right);
        public static bool operator !=(InternalUploadJobCreationPurpose left, InternalUploadJobCreationPurpose right) => !left.Equals(right);
        public static implicit operator InternalUploadJobCreationPurpose(string value) => new InternalUploadJobCreationPurpose(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalUploadJobCreationPurpose other && Equals(other);
        public bool Equals(InternalUploadJobCreationPurpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        public override string ToString() => _value;
    }
}

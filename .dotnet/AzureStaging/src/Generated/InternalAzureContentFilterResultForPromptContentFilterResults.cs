// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;

namespace Azure.AI.OpenAI
{
    /// <summary> The AzureContentFilterResultForPromptContentFilterResults. </summary>
    internal partial class InternalAzureContentFilterResultForPromptContentFilterResults
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary>
        /// Gets the dictionary containing additional raw data to serialize.
        /// </summary>
        /// <remarks>
        /// NOTE: This mechanism added for subclients pending availability of a C# language feature.
        ///       It is subject to change and not intended for stable use.
        /// </remarks>
        [Experimental("OPENAI002")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public IDictionary<string, BinaryData> SerializedAdditionalRawData
            => _serializedAdditionalRawData ??= new ChangeTrackingDictionary<string, BinaryData>();

        /// <summary> Initializes a new instance of <see cref="InternalAzureContentFilterResultForPromptContentFilterResults"/>. </summary>
        /// <param name="error"></param>
        /// <param name="jailbreak"></param>
        /// <param name="indirectAttack"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="error"/>, <paramref name="jailbreak"/> or <paramref name="indirectAttack"/> is null. </exception>
        internal InternalAzureContentFilterResultForPromptContentFilterResults(InternalAzureContentFilterResultForPromptContentFilterResultsError error, ContentFilterDetectionResult jailbreak, ContentFilterDetectionResult indirectAttack)
        {
            Argument.AssertNotNull(error, nameof(error));
            Argument.AssertNotNull(jailbreak, nameof(jailbreak));
            Argument.AssertNotNull(indirectAttack, nameof(indirectAttack));

            Error = error;
            Jailbreak = jailbreak;
            IndirectAttack = indirectAttack;
        }

        /// <summary> Initializes a new instance of <see cref="InternalAzureContentFilterResultForPromptContentFilterResults"/>. </summary>
        /// <param name="sexual"></param>
        /// <param name="violence"></param>
        /// <param name="hate"></param>
        /// <param name="selfHarm"></param>
        /// <param name="profanity"></param>
        /// <param name="customBlocklists"></param>
        /// <param name="error"></param>
        /// <param name="jailbreak"></param>
        /// <param name="indirectAttack"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InternalAzureContentFilterResultForPromptContentFilterResults(ContentFilterSeverityResult sexual, ContentFilterSeverityResult violence, ContentFilterSeverityResult hate, ContentFilterSeverityResult selfHarm, ContentFilterDetectionResult profanity, ContentFilterBlocklistResult customBlocklists, InternalAzureContentFilterResultForPromptContentFilterResultsError error, ContentFilterDetectionResult jailbreak, ContentFilterDetectionResult indirectAttack, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Sexual = sexual;
            Violence = violence;
            Hate = hate;
            SelfHarm = selfHarm;
            Profanity = profanity;
            CustomBlocklists = customBlocklists;
            Error = error;
            Jailbreak = jailbreak;
            IndirectAttack = indirectAttack;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InternalAzureContentFilterResultForPromptContentFilterResults"/> for deserialization. </summary>
        internal InternalAzureContentFilterResultForPromptContentFilterResults()
        {
        }

        /// <summary> Gets the sexual. </summary>
        internal ContentFilterSeverityResult Sexual { get; set; }
        /// <summary> Gets the violence. </summary>
        internal ContentFilterSeverityResult Violence { get; set; }
        /// <summary> Gets the hate. </summary>
        internal ContentFilterSeverityResult Hate { get; set; }
        /// <summary> Gets the self harm. </summary>
        internal ContentFilterSeverityResult SelfHarm { get; set; }
        /// <summary> Gets the profanity. </summary>
        internal ContentFilterDetectionResult Profanity { get; set; }
        /// <summary> Gets the custom blocklists. </summary>
        internal ContentFilterBlocklistResult CustomBlocklists { get; set; }
        /// <summary> Gets the error. </summary>
        internal InternalAzureContentFilterResultForPromptContentFilterResultsError Error { get; set; }
        /// <summary> Gets the jailbreak. </summary>
        internal ContentFilterDetectionResult Jailbreak { get; set; }
        /// <summary> Gets the indirect attack. </summary>
        internal ContentFilterDetectionResult IndirectAttack { get; set; }
    }
}



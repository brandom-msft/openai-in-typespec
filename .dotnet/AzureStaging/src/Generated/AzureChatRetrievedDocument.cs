// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Azure.AI.OpenAI.Chat
{
    /// <summary> The AzureChatCompletionResponseMessageContextAllRetrievedDocument. </summary>
    public partial class AzureChatRetrievedDocument
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary>
        /// Gets the dictionary containing additional raw data to serialize.
        /// </summary>
        /// <remarks>
        /// NOTE: This mechanism added for subclients pending availability of a C# language feature.
        ///       It is subject to change and not intended for stable use.
        /// </remarks>
        [Experimental("OPENAI002")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public IDictionary<string, BinaryData> SerializedAdditionalRawData
            => _serializedAdditionalRawData ??= new ChangeTrackingDictionary<string, BinaryData>();

        /// <summary> Initializes a new instance of <see cref="AzureChatRetrievedDocument"/>. </summary>
        /// <param name="content"></param>
        /// <param name="searchQueries"></param>
        /// <param name="dataSourceIndex"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> or <paramref name="searchQueries"/> is null. </exception>
        internal AzureChatRetrievedDocument(string content, IEnumerable<string> searchQueries, int dataSourceIndex)
        {
            Argument.AssertNotNull(content, nameof(content));
            Argument.AssertNotNull(searchQueries, nameof(searchQueries));

            Content = content;
            SearchQueries = searchQueries.ToList();
            DataSourceIndex = dataSourceIndex;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatRetrievedDocument"/>. </summary>
        /// <param name="content"></param>
        /// <param name="title"></param>
        /// <param name="url"></param>
        /// <param name="filepath"></param>
        /// <param name="chunkId"></param>
        /// <param name="searchQueries"></param>
        /// <param name="dataSourceIndex"></param>
        /// <param name="originalSearchScore"></param>
        /// <param name="rerankScore"></param>
        /// <param name="filterReason"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AzureChatRetrievedDocument(string content, string title, string url, string filepath, string chunkId, IReadOnlyList<string> searchQueries, int dataSourceIndex, double? originalSearchScore, double? rerankScore, string filterReason, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Content = content;
            Title = title;
            Url = url;
            Filepath = filepath;
            ChunkId = chunkId;
            SearchQueries = searchQueries;
            DataSourceIndex = dataSourceIndex;
            OriginalSearchScore = originalSearchScore;
            RerankScore = rerankScore;
            FilterReason = filterReason;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatRetrievedDocument"/> for deserialization. </summary>
        internal AzureChatRetrievedDocument()
        {
        }

        /// <summary> Gets the content. </summary>
        public string Content { get; }
        /// <summary> Gets the title. </summary>
        public string Title { get; }
        /// <summary> Gets the url. </summary>
        public string Url { get; }
        /// <summary> Gets the filepath. </summary>
        public string Filepath { get; }
        /// <summary> Gets the chunk id. </summary>
        public string ChunkId { get; }
        /// <summary> Gets the search queries. </summary>
        public IReadOnlyList<string> SearchQueries { get; }
        /// <summary> Gets the data source index. </summary>
        public int DataSourceIndex { get; }
        /// <summary> Gets the original search score. </summary>
        public double? OriginalSearchScore { get; }
        /// <summary> Gets the rerank score. </summary>
        public double? RerankScore { get; }
        /// <summary> Gets the filter reason. </summary>
        public string FilterReason { get; }
    }
}


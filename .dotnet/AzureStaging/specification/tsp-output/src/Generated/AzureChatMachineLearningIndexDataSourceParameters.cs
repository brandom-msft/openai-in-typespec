// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> The AzureChatMachineLearningIndexDataSourceParameters. </summary>
    public partial class AzureChatMachineLearningIndexDataSourceParameters
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AzureChatMachineLearningIndexDataSourceParameters"/>. </summary>
        /// <param name="projectResourceId"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectResourceId"/>, <paramref name="name"/> or <paramref name="version"/> is null. </exception>
        internal AzureChatMachineLearningIndexDataSourceParameters(string projectResourceId, string name, string version)
        {
            Argument.AssertNotNull(projectResourceId, nameof(projectResourceId));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            ProjectResourceId = projectResourceId;
            Name = name;
            Version = version;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatMachineLearningIndexDataSourceParameters"/>. </summary>
        /// <param name="authentication"></param>
        /// <param name="topNDocuments"></param>
        /// <param name="inScope"></param>
        /// <param name="strictness"></param>
        /// <param name="roleInformation"></param>
        /// <param name="projectResourceId"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="filter"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AzureChatMachineLearningIndexDataSourceParameters(BinaryData authentication, int? topNDocuments, bool? inScope, int? strictness, string roleInformation, string projectResourceId, string name, string version, string filter, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Authentication = authentication;
            TopNDocuments = topNDocuments;
            InScope = inScope;
            Strictness = strictness;
            RoleInformation = roleInformation;
            ProjectResourceId = projectResourceId;
            Name = name;
            Version = version;
            Filter = filter;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatMachineLearningIndexDataSourceParameters"/> for deserialization. </summary>
        internal AzureChatMachineLearningIndexDataSourceParameters()
        {
        }

        /// <summary>
        /// Gets the authentication
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Authentication { get; }
        /// <summary> Gets the top n documents. </summary>
        public int? TopNDocuments { get; }
        /// <summary> Gets the in scope. </summary>
        public bool? InScope { get; }
        /// <summary> Gets the strictness. </summary>
        public int? Strictness { get; }
        /// <summary> Gets the role information. </summary>
        public string RoleInformation { get; }
        /// <summary> Gets the project resource id. </summary>
        public string ProjectResourceId { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the version. </summary>
        public string Version { get; }
        /// <summary> Gets the filter. </summary>
        public string Filter { get; }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    public partial class AzureContentFilterResultForChoice : IUtf8JsonSerializable, IJsonModel<AzureContentFilterResultForChoice>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AzureContentFilterResultForChoice>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AzureContentFilterResultForChoice>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureContentFilterResultForChoice>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureContentFilterResultForChoice)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Sexual))
            {
                writer.WritePropertyName("sexual"u8);
                writer.WriteObjectValue(Sexual, options);
            }
            if (Optional.IsDefined(Violence))
            {
                writer.WritePropertyName("violence"u8);
                writer.WriteObjectValue(Violence, options);
            }
            if (Optional.IsDefined(Hate))
            {
                writer.WritePropertyName("hate"u8);
                writer.WriteObjectValue(Hate, options);
            }
            if (Optional.IsDefined(SelfHarm))
            {
                writer.WritePropertyName("selfHarm"u8);
                writer.WriteObjectValue(SelfHarm, options);
            }
            if (Optional.IsDefined(Profanity))
            {
                writer.WritePropertyName("profanity"u8);
                writer.WriteObjectValue(Profanity, options);
            }
            if (Optional.IsCollectionDefined(CustomBlocklists))
            {
                writer.WritePropertyName("customBlocklists"u8);
                writer.WriteStartArray();
                foreach (var item in CustomBlocklists)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Error))
            {
                writer.WritePropertyName("error"u8);
                writer.WriteStartObject();
                foreach (var item in Error)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(ProtectedMaterialText))
            {
                writer.WritePropertyName("protected_material_text"u8);
                writer.WriteObjectValue(ProtectedMaterialText, options);
            }
            if (Optional.IsDefined(ProtectedMaterialCode))
            {
                writer.WritePropertyName("protected_material_code"u8);
                writer.WriteObjectValue(ProtectedMaterialCode, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AzureContentFilterResultForChoice IJsonModel<AzureContentFilterResultForChoice>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureContentFilterResultForChoice>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureContentFilterResultForChoice)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAzureContentFilterResultForChoice(document.RootElement, options);
        }

        internal static AzureContentFilterResultForChoice DeserializeAzureContentFilterResultForChoice(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AzureContentFilterResult sexual = default;
            AzureContentFilterResult violence = default;
            AzureContentFilterResult hate = default;
            AzureContentFilterResult selfHarm = default;
            AzureContentFilterDetectionResult profanity = default;
            IReadOnlyList<AzureContentFilterBlocklistIdResult> customBlocklists = default;
            IReadOnlyDictionary<string, BinaryData> error = default;
            AzureContentFilterDetectionResult protectedMaterialText = default;
            AzureContentFilterCitedDetectionResult protectedMaterialCode = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sexual"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sexual = AzureContentFilterResult.DeserializeAzureContentFilterResult(property.Value, options);
                    continue;
                }
                if (property.NameEquals("violence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    violence = AzureContentFilterResult.DeserializeAzureContentFilterResult(property.Value, options);
                    continue;
                }
                if (property.NameEquals("hate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hate = AzureContentFilterResult.DeserializeAzureContentFilterResult(property.Value, options);
                    continue;
                }
                if (property.NameEquals("selfHarm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfHarm = AzureContentFilterResult.DeserializeAzureContentFilterResult(property.Value, options);
                    continue;
                }
                if (property.NameEquals("profanity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    profanity = AzureContentFilterDetectionResult.DeserializeAzureContentFilterDetectionResult(property.Value, options);
                    continue;
                }
                if (property.NameEquals("customBlocklists"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureContentFilterBlocklistIdResult> array = new List<AzureContentFilterBlocklistIdResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AzureContentFilterBlocklistIdResult.DeserializeAzureContentFilterBlocklistIdResult(item, options));
                    }
                    customBlocklists = array;
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    error = dictionary;
                    continue;
                }
                if (property.NameEquals("protected_material_text"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protectedMaterialText = AzureContentFilterDetectionResult.DeserializeAzureContentFilterDetectionResult(property.Value, options);
                    continue;
                }
                if (property.NameEquals("protected_material_code"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protectedMaterialCode = AzureContentFilterCitedDetectionResult.DeserializeAzureContentFilterCitedDetectionResult(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AzureContentFilterResultForChoice(
                sexual,
                violence,
                hate,
                selfHarm,
                profanity,
                customBlocklists ?? new ChangeTrackingList<AzureContentFilterBlocklistIdResult>(),
                error ?? new ChangeTrackingDictionary<string, BinaryData>(),
                protectedMaterialText,
                protectedMaterialCode,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AzureContentFilterResultForChoice>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureContentFilterResultForChoice>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AzureContentFilterResultForChoice)} does not support writing '{options.Format}' format.");
            }
        }

        AzureContentFilterResultForChoice IPersistableModel<AzureContentFilterResultForChoice>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureContentFilterResultForChoice>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAzureContentFilterResultForChoice(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AzureContentFilterResultForChoice)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AzureContentFilterResultForChoice>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AzureContentFilterResultForChoice FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAzureContentFilterResultForChoice(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}

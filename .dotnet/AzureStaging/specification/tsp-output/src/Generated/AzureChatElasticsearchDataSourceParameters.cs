// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> The AzureChatElasticsearchDataSourceParameters. </summary>
    public partial class AzureChatElasticsearchDataSourceParameters
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AzureChatElasticsearchDataSourceParameters"/>. </summary>
        /// <param name="allowPartialResult">
        /// If set to true, the system will allow partial search results to be used and the request will fail if all
        /// partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
        /// </param>
        /// <param name="endpoint"></param>
        /// <param name="indexName"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="indexName"/> is null. </exception>
        internal AzureChatElasticsearchDataSourceParameters(bool allowPartialResult, Uri endpoint, string indexName)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(indexName, nameof(indexName));

            AllowPartialResult = allowPartialResult;
            IncludeContexts = new ChangeTrackingList<BinaryData>();
            Endpoint = endpoint;
            IndexName = indexName;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatElasticsearchDataSourceParameters"/>. </summary>
        /// <param name="authentication">
        /// The authentication mechanism to use with the data source.
        /// Please note <see cref="AzureChatDataSourceAuthenticationOptions"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceAccessTokenAuthenticationOptions"/>, <see cref="AzureChatDataSourceApiKeyAuthenticationOptions"/>, <see cref="AzureChatDataSourceConnectionStringAuthenticationOptions"/>, <see cref="AzureChatDataSourceEncodedApiKeyAuthenticationOptions"/>, <see cref="AzureChatDataSourceKeyAndKeyIdAuthenticationOptions"/>, <see cref="AzureChatDataSourceSystemAssignedManagedIdentityAuthenticationOptions"/> and <see cref="AzureChatDataSourceUserAssignedManagedIdentityAuthenticationOptions"/>.
        /// </param>
        /// <param name="topNDocuments"> The configured number of documents to feature in the query. </param>
        /// <param name="inScope"> Whether queries should be restricted to use of the indexed data. </param>
        /// <param name="strictness">
        /// The configured strictness of the search relevance filtering.
        /// Higher strictness will increase precision but lower recall of the answer.
        /// </param>
        /// <param name="roleInformation">
        /// Additional instructions for the model to inform how it should behave and any context it should reference when
        /// generating a response. You can describe the assistant's personality and tell it how to format responses.
        /// This is limited to 100 tokens and counts against the overall token limit.
        /// </param>
        /// <param name="maxSearchQueries">
        /// The maximum number of rewritten queries that should be sent to the search provider for a single user message.
        /// By default, the system will make an automatic determination.
        /// </param>
        /// <param name="allowPartialResult">
        /// If set to true, the system will allow partial search results to be used and the request will fail if all
        /// partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
        /// </param>
        /// <param name="includeContexts">
        /// The output context properties to include on the response.
        /// By default, citations and intent will be requested.
        /// </param>
        /// <param name="endpoint"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldsMapping"></param>
        /// <param name="queryType"></param>
        /// <param name="embeddingDependency">
        /// Please note <see cref="AzureChatDataSourceVectorizationSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceDeploymentNameVectorizationSource"/>, <see cref="AzureChatDataSourceEndpointVectorizationSource"/> and <see cref="AzureChatDataSourceModelIdVectorizationSource"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AzureChatElasticsearchDataSourceParameters(AzureChatDataSourceAuthenticationOptions authentication, int? topNDocuments, bool? inScope, int? strictness, string roleInformation, int? maxSearchQueries, bool allowPartialResult, IReadOnlyList<BinaryData> includeContexts, Uri endpoint, string indexName, AzureChatElasticsearchDataSourceParametersFieldsMapping fieldsMapping, string queryType, AzureChatDataSourceVectorizationSource embeddingDependency, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Authentication = authentication;
            TopNDocuments = topNDocuments;
            InScope = inScope;
            Strictness = strictness;
            RoleInformation = roleInformation;
            MaxSearchQueries = maxSearchQueries;
            AllowPartialResult = allowPartialResult;
            IncludeContexts = includeContexts;
            Endpoint = endpoint;
            IndexName = indexName;
            FieldsMapping = fieldsMapping;
            QueryType = queryType;
            EmbeddingDependency = embeddingDependency;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatElasticsearchDataSourceParameters"/> for deserialization. </summary>
        internal AzureChatElasticsearchDataSourceParameters()
        {
        }

        /// <summary>
        /// The authentication mechanism to use with the data source.
        /// Please note <see cref="AzureChatDataSourceAuthenticationOptions"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceAccessTokenAuthenticationOptions"/>, <see cref="AzureChatDataSourceApiKeyAuthenticationOptions"/>, <see cref="AzureChatDataSourceConnectionStringAuthenticationOptions"/>, <see cref="AzureChatDataSourceEncodedApiKeyAuthenticationOptions"/>, <see cref="AzureChatDataSourceKeyAndKeyIdAuthenticationOptions"/>, <see cref="AzureChatDataSourceSystemAssignedManagedIdentityAuthenticationOptions"/> and <see cref="AzureChatDataSourceUserAssignedManagedIdentityAuthenticationOptions"/>.
        /// </summary>
        public AzureChatDataSourceAuthenticationOptions Authentication { get; }
        /// <summary> The configured number of documents to feature in the query. </summary>
        public int? TopNDocuments { get; }
        /// <summary> Whether queries should be restricted to use of the indexed data. </summary>
        public bool? InScope { get; }
        /// <summary>
        /// The configured strictness of the search relevance filtering.
        /// Higher strictness will increase precision but lower recall of the answer.
        /// </summary>
        public int? Strictness { get; }
        /// <summary>
        /// Additional instructions for the model to inform how it should behave and any context it should reference when
        /// generating a response. You can describe the assistant's personality and tell it how to format responses.
        /// This is limited to 100 tokens and counts against the overall token limit.
        /// </summary>
        public string RoleInformation { get; }
        /// <summary>
        /// The maximum number of rewritten queries that should be sent to the search provider for a single user message.
        /// By default, the system will make an automatic determination.
        /// </summary>
        public int? MaxSearchQueries { get; }
        /// <summary>
        /// If set to true, the system will allow partial search results to be used and the request will fail if all
        /// partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
        /// </summary>
        public bool AllowPartialResult { get; }
        /// <summary>
        /// The output context properties to include on the response.
        /// By default, citations and intent will be requested.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description>"citations"</description>
        /// </item>
        /// <item>
        /// <description>"intent"</description>
        /// </item>
        /// <item>
        /// <description>"all_retrieved_documents"</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> IncludeContexts { get; }
        /// <summary> Gets the endpoint. </summary>
        public Uri Endpoint { get; }
        /// <summary> Gets the index name. </summary>
        public string IndexName { get; }
        /// <summary> Gets the fields mapping. </summary>
        public AzureChatElasticsearchDataSourceParametersFieldsMapping FieldsMapping { get; }
        /// <summary> Gets the query type. </summary>
        public string QueryType { get; }
        /// <summary>
        /// Gets the embedding dependency
        /// Please note <see cref="AzureChatDataSourceVectorizationSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceDeploymentNameVectorizationSource"/>, <see cref="AzureChatDataSourceEndpointVectorizationSource"/> and <see cref="AzureChatDataSourceModelIdVectorizationSource"/>.
        /// </summary>
        public AzureChatDataSourceVectorizationSource EmbeddingDependency { get; }
    }
}

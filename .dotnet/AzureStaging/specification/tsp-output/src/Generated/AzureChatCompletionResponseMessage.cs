// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> The AzureChatCompletionResponseMessage. </summary>
    public partial class AzureChatCompletionResponseMessage : ChatCompletionResponseMessage
    {
        /// <summary> Initializes a new instance of <see cref="AzureChatCompletionResponseMessage"/>. </summary>
        /// <param name="content"> The contents of the message. </param>
        internal AzureChatCompletionResponseMessage(string content) : base(content)
        {
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatCompletionResponseMessage"/>. </summary>
        /// <param name="content"> The contents of the message. </param>
        /// <param name="toolCalls"></param>
        /// <param name="role"> The role of the author of this message. </param>
        /// <param name="functionCall"> Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="context"></param>
        internal AzureChatCompletionResponseMessage(string content, IReadOnlyList<ChatCompletionMessageToolCall> toolCalls, string role, ChatCompletionResponseMessageFunctionCall functionCall, IDictionary<string, BinaryData> serializedAdditionalRawData, AzureChatCompletionResponseMessageContext context) : base(content, toolCalls, role, functionCall, serializedAdditionalRawData)
        {
            Context = context;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatCompletionResponseMessage"/> for deserialization. </summary>
        internal AzureChatCompletionResponseMessage()
        {
        }

        /// <summary> Gets the context. </summary>
        public AzureChatCompletionResponseMessageContext Context { get; }
    }
}

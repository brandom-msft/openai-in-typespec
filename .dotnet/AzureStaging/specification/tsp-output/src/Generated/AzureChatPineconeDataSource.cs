// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> The AzureChatPineconeDataSource. </summary>
    public partial class AzureChatPineconeDataSource : AzureChatDataSource
    {
        /// <summary> Initializes a new instance of <see cref="AzureChatPineconeDataSource"/>. </summary>
        /// <param name="environment"></param>
        /// <param name="indexName"></param>
        /// <param name="embeddingDependency">
        /// Please note <see cref="AzureChatDataSourceVectorizationSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceDeploymentNameVectorizationSource"/>, <see cref="AzureChatDataSourceEndpointVectorizationSource"/> and <see cref="AzureChatDataSourceModelIdVectorizationSource"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="environment"/>, <paramref name="indexName"/> or <paramref name="embeddingDependency"/> is null. </exception>
        internal AzureChatPineconeDataSource(string environment, string indexName, AzureChatDataSourceVectorizationSource embeddingDependency)
        {
            Argument.AssertNotNull(environment, nameof(environment));
            Argument.AssertNotNull(indexName, nameof(indexName));
            Argument.AssertNotNull(embeddingDependency, nameof(embeddingDependency));

            Type = "pinecone";
            Environment = environment;
            IndexName = indexName;
            EmbeddingDependency = embeddingDependency;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatPineconeDataSource"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="authentication"></param>
        /// <param name="topNDocuments"></param>
        /// <param name="inScope"></param>
        /// <param name="strictness"></param>
        /// <param name="roleInformation"></param>
        /// <param name="environment"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldsMapping"></param>
        /// <param name="embeddingDependency">
        /// Please note <see cref="AzureChatDataSourceVectorizationSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceDeploymentNameVectorizationSource"/>, <see cref="AzureChatDataSourceEndpointVectorizationSource"/> and <see cref="AzureChatDataSourceModelIdVectorizationSource"/>.
        /// </param>
        internal AzureChatPineconeDataSource(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, BinaryData authentication, int? topNDocuments, bool? inScope, int? strictness, string roleInformation, string environment, string indexName, AzureChatPineconeDataSourceFieldsMapping fieldsMapping, AzureChatDataSourceVectorizationSource embeddingDependency) : base(type, serializedAdditionalRawData)
        {
            Authentication = authentication;
            TopNDocuments = topNDocuments;
            InScope = inScope;
            Strictness = strictness;
            RoleInformation = roleInformation;
            Environment = environment;
            IndexName = indexName;
            FieldsMapping = fieldsMapping;
            EmbeddingDependency = embeddingDependency;
        }

        /// <summary> Initializes a new instance of <see cref="AzureChatPineconeDataSource"/> for deserialization. </summary>
        internal AzureChatPineconeDataSource()
        {
        }

        /// <summary>
        /// Gets the authentication
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Authentication { get; }
        /// <summary> Gets the top n documents. </summary>
        public int? TopNDocuments { get; }
        /// <summary> Gets the in scope. </summary>
        public bool? InScope { get; }
        /// <summary> Gets the strictness. </summary>
        public int? Strictness { get; }
        /// <summary> Gets the role information. </summary>
        public string RoleInformation { get; }
        /// <summary> Gets the environment. </summary>
        public string Environment { get; }
        /// <summary> Gets the index name. </summary>
        public string IndexName { get; }
        /// <summary> Gets the fields mapping. </summary>
        public AzureChatPineconeDataSourceFieldsMapping FieldsMapping { get; }
        /// <summary>
        /// Gets the embedding dependency
        /// Please note <see cref="AzureChatDataSourceVectorizationSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureChatDataSourceDeploymentNameVectorizationSource"/>, <see cref="AzureChatDataSourceEndpointVectorizationSource"/> and <see cref="AzureChatDataSourceModelIdVectorizationSource"/>.
        /// </summary>
        public AzureChatDataSourceVectorizationSource EmbeddingDependency { get; }
    }
}
